using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using PayanarCommon = Payanar.SS.Net.Libraries.Common;
using BaseBusinessLayer = $ProjectNamespace$.Net.Base.BusinessLayer;
using BaseCommon = $ProjectNamespace$.Net.Base.Common;
using $ProjectNamespace$.Net.$ModuleName$.BusinessEntities;
using $ProjectNamespace$.Net.$ModuleName$.DatabaseLayer;

namespace $ProjectNamespace$.Net.$ModuleName$.BusinessLayers
{
    public class $ClassName$ : BaseBusinessLayer.BusinessObject, BaseCommon.IParent
    {
        #region Private Variables

        #endregion Private Variables

        #region Constructors

        public $ClassName$()
            : base($ClassName$EntityFactory.Factory, $ClassName$DatabaseAgentFactory.Factory)
        { }

 	public $ClassName$(PayanarCommon.IParent parent)
            : base($ClassName$EntityFactory.Factory, $ClassName$DatabaseAgentFactory.Factory, parent)
        { }

        #endregion Constructors

        #region Properties

        public $ClassName$Entity $ClassName$EntityDetail
        {
            get { return BusinessEntityObject as $ClassName$Entity; }
        }

	$BusinessObjectInstanceDetailsPropertyTemplate$

        $BusinessObjectChildInstanceDetailsProperty$

        $PersistentPropertiesDeclarationCode$

	$NonPersistentPropertiesDeclarationCode$

        #endregion Properties

        #region Methods

        #region Public

        public override int Load()
        {
            int result = 0;

            result += base.Load();

            return result;
        }

        #endregion Public

        #region Protected

        protected override int SaveChildBusinessObject()
        {
            int result = 0;

            result = base.SaveChildBusinessObject();
            $BusinessObjectChildCollectionDetailsSaveLines$

            return result;
        }

        protected override bool ValidateBeforeSave()
        {
            bool isValid = base.ValidateBeforeSave();

            return isValid;
        }

        protected override bool ValidateBeforeDelete()
        {
            bool isValid = base.ValidateBeforeDelete();

            return isValid;
        }

        protected override bool ValidateChildObjectsBeforeSave()
        {
            bool result = false;

            result = base.ValidateChildObjectsBeforeSave();
            $BusinessObjectChildCollectionDetailsValidateLines$

            return result;
        }

        protected override bool ValidateChildObjectsBeforeDelete()
        {
            bool result = false;

            result = base.ValidateChildObjectsBeforeSave();
            $BusinessObjectChildCollectionDetailsValidateLines$

            return result;
        }

        #endregion Protected

        #endregion Methods
    }
}
